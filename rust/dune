(dirs :standard .cargo \ target)

; Usually below two "subdir" stanzas should not exist, and instead should just
; be (data_only_dirs vendor) which instructs dune to not try and interpret dune
; files and so on in vendor.
;
; However, this causes errors since dune
; *also* ignores all files that start with an underscore, and so it ignores
; the vendored vendor/futures-core/src/task/__internalk directory causing Rust
; builds in dune to fail. Based on suggestions in
; https://github.com/ocaml/dune/issues/4795, we work around this by first
; specifying as data_only_dirs the directories which contain dune files in them
; (so they aren't compiled), and then manually specifying the directory which
; starts with an underscore to un-ignore it.

(subdir
 vendor
 (data_only_dirs ocaml*))

(subdir
 vendor/futures-core/src/task
 (dirs :standard __internal))

(rule
 (deps
  (source_tree .))
 (targets libpolars_ocaml.a dllpolars_ocaml.so)
 (enabled_if
  (and
   (= %{system} macosx)
   (= %{profile} release)))
 (action
  (no-infer
   (progn
    (run cargo build --release)
    (copy ./target/release/libpolars_ocaml.dylib dllpolars_ocaml.so)
    (copy ./target/release/libpolars_ocaml.a libpolars_ocaml.a)))))

(rule
 (deps
  (source_tree .))
 (targets libpolars_ocaml.a dllpolars_ocaml.so)
 (enabled_if
  (and
   (= %{system} macosx)
   (not
    (= %{profile} release))))
 (action
  (no-infer
   (progn
    (run cargo build)
    (copy ./target/debug/libpolars_ocaml.dylib dllpolars_ocaml.so)
    (copy ./target/debug/libpolars_ocaml.a libpolars_ocaml.a)))))

(rule
 (deps
  (source_tree .))
 (targets libpolars_ocaml.a dllpolars_ocaml.so)
 (enabled_if
  (and
   (not
    (= %{system} macosx))
   (= %{profile} release)))
 (action
  (no-infer
   (progn
    (run cargo build --release)
    (copy ./target/release/libpolars_ocaml.so dllpolars_ocaml.so)
    (copy ./target/release/libpolars_ocaml.a libpolars_ocaml.a)))))

(rule
 (deps
  (source_tree .))
 (targets libpolars_ocaml.a dllpolars_ocaml.so)
 (enabled_if
  (and
   (not
    (= %{system} macosx))
   (not
    (= %{profile} release))))
 (action
  (no-infer
   (progn
    (run cargo build)
    (copy ./target/debug/libpolars_ocaml.so dllpolars_ocaml.so)
    (copy ./target/debug/libpolars_ocaml.a libpolars_ocaml.a)))))

(rule
 (targets c_library_flags.sexp)
 (action
  (run ./config/discover.exe)))

(library
 (name polars_bindings)
 (public_name polars.bindings)
 (foreign_archives polars_ocaml)
 (c_library_flags
  (:include c_library_flags.sexp)))

(env
 (utop
  (env-vars
   (OCAML_INTEROP_NO_CAML_STARTUP true))))
