name: Build
on:
  pull_request:
  push:
    branches:
      - main
env:
  CARGO_TERM_COLOR: always
jobs:
  build-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: hostname
      - run: whoami
      - run: echo $PATH
      - run: ls ~/
      - run: echo ~

      - name: Check
        run: cargo check --verbose
        working-directory: ./rust
      - name: Build
        run: cargo build --verbose
        working-directory: ./rust
      - name: Run tests
        run: cargo test --verbose
        working-directory: ./rust
      - name: Clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: "github-pr-review"
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Rust format
        run: cargo fmt --all -- --check
        working-directory: ./rust

  # In the past we tried to support building this on 32bit architectures,[1] but
  # some of polars' crates clearly don't support it[2] and getting both the
  # OCaml and Rust compilers to work on 32bit is a pain, so we are leaving
  # this comment as a reminder so that we do not try this without sufficient
  # motivation again.
  #
  # [1]: https://github.com/mt-caret/polars-ocaml/pull/64
  # [2]: https://github.com/pola-rs/polars/blob/c4fdbfe2c7f7ce7616ad9301981bc5d616c3beef/crates/polars-row/src/row.rs#L21
  build-ocaml:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - run: opam install . --deps-only --with-doc --with-test

      - run: opam exec -- dune build
      - run: opam exec -- dune runtest

  format-ocaml:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: echo $PATH
      - run: which opam

      - uses: ocaml/setup-ocaml/lint-fmt@v2
